/*
* @file Time.h
* This header file contains the declaration of the described types in the IDL file.
*
* This file was generated by the tool gen.
*/
#pragma once

#include <fastrtps/utils/fixed_slze_string.hpp>
#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>
#if defined(_WIN32)
#ifdefined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport_declspec( dllexport)
#else
#define eProsima_user_DllExport
#endif // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif //_WIN32

1
#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(Time_SOURCE)
#define Time_DUAPI_dedspec(dllexport)
#else
#define Time_DUAPl __dedspec(dllimport)
#endif // Time_SOURCE
#else
#define Time_DllAPI
#endif //EPROSIMA_USER_DLL_EXPORT
#else
#defineTime_DUAPl
#endif // _WIN32

namespace eprosima { 
namespace fastcdr { 
class Cdr;
} // namespace fastcdr 
} // namespace eprosima
namespace builtin_interfaces {
namespace msg {
/*!
*	@brief This class represents the structure Time defined by the user In the IDL file.
*	@ingroup TIME
*/
classTime
{
    public
    /*!
    *@brief Default constructor.
    */
    eProsima_user_DllExport Time();

    /*!
    * @brief Default destructor.
    */
    eProsima_user_DllExport ~Time();

    /*!
    * @brief Copy constructor.
    * @param x Reference to the object builtin_interfaces::msg::Time that will be copied.
	*/
    eProsima_user_DllExport Time(
        constTime&x);

    /*!
    * @brief Move constructor.
    * @param x Reference to the object builtin_interfaces::msg::Time that will be copied.
    */
    eProsima_user_DllExport Time(
        Time&& x) noexcept;

    /*!
    * @brief Copy assignment.
    * @param x Reference to the object builtin_interfaces::msg::Time that will be copied.
    */
    eProsima_user_DllExport Time& operator = (constTime& x);

    /*!
    * ©brief Move assignment	
    * @param x Reference to the object builtin_interfaces::msg::Time that will be copied.
    */
    eProsima_user_DllExport Time& operator =(
        Time&& x) noexcept;

    /*!
    * ©brief Comparison operator.
    * ©param x builtin_interfaces::msg::Time object to compare.
    */
    eProsima_user_DllExport bool operator ==(
        constTime& x) const;

    /*!
    * @brief Comparison operator.
    * @param x builtin_interfaces::msg::Time object to compare.
    */
    eProsima_user_DllExport bool operator !=(
        const Time& x) const;

    /*!
    * @brief This function sets a value in member sec
    * @param _sec New value for member sec
    */
    eProsima_user_DllExport void sec( int32_t_sec);

    /*!
    * @brief This function returns the value of member sec
    * @return Value of member sec
    */
    eProsima_user_DllExport int32_t sec() const;

    /*!
    * @brief This function returns a reference to member sec
    * @return Reference to member sec
    */
    eProsima_user_DllExport int32_t& sec();

    /*!
    * @briefThis function sets a value in member nanosec
    * @param nanosec New value for member nanosec
    */
    eProsima_user_DllExport void nanosec( uint32_t _nanosec);

    /*!
    * @briefThis function returns the value of member nanosec
    * @return Value of member nanosec
    */
    eProsima_user_DllExport uint32_t nanosec() const;

    /*!
    * @briefThis function returns a reference to member nanosec
    * @return Reference to member nanosec	
    */	
    eProsima_user_DllExport uint32_t& nanosec();

    /*
    * @brief This function returns the maximum serialized size ofan object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(  size_t current_alignment = 0);

    /*
    *@brief This functlon returns the serialized size of a data depending on the 	buffer alignmenL
    *@paramdata Data which is calculated its serialized size.
    *@param current_alignment Buffer alignmenL
    *@return Serializedsize.
    */
    eProsima_user_DllExportstaticsize_t getCdrSerializedSize(
        const builtin_interfaces::msg::Time&data, size_tcurrent_alignment = 0);

    /*
    * @brief This Function serializes an object using CDR serialization.
    * @param cdr CDR serialization object
    */
    eProsima_user_DllExport vold seriallze( eprosima::fastcdr::Cdr& cdr) const; 

    /*
    * @briefThis Function deserializes an object using CDR serialization.
    * @param cdr CDR serialization object
    */
    eProsima_user_DllExport vold deserlallze(
        eprosima::fastcdr::Cdr& cdr);

    /*
    *	@brief This Function returns the maximum serlalized slze oF the Key oF an object
    *	depending on the buFFer alignment.
    *	@param current_alignment BuFFer alignment
    *	@return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize( size_t current_alignment = 0);

    /*!
    * @brieFThis Function tells you IF the Key has been defined For thls type
    */
    eProsima_user_DllExport static bool isKeyDeFined();

    /*!
    * @brief This Function serializes the key members of an object using CDR serialization.
    * @param cdr CDR serialization object.
    */
    eProsima_user_DllExport void serializeKey(
        eprosima::fastcdr::Cdr& cdr) const;

    private:
    int32_t m_sec;
    uint32_t m_nanosec;
};
} // namespace msg
} // namespace builtin_interfaces